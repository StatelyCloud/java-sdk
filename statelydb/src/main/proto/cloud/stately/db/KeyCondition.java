// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db/list.proto
// Protobuf Java Version: 4.32.0

package cloud.stately.db;

/**
 * <pre>
 * A KeyCondition is an additional constraint to be applied to the list
 * operation. It is used to filter the results based on a specific key path
 * and an operator.
 * Wherever possible, stately will apply these key conditions at the DB layer
 * to optimize the list operation latency and cost.
 * Key conditions may be combined with a key_path_prefix to further
 * optimize the list operation. HOWEVER Key conditions must share the
 * same prefix as the key_path_prefix.
 * </pre>
 *
 * Protobuf type {@code stately.db.KeyCondition}
 */
@com.google.protobuf.Generated
public final class KeyCondition extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:stately.db.KeyCondition)
    KeyConditionOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 0,
      /* suffix= */ "",
      KeyCondition.class.getName());
  }
  // Use KeyCondition.newBuilder() to construct.
  private KeyCondition(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private KeyCondition() {
    keyPath_ = "";
    operator_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return cloud.stately.db.ListProto.internal_static_stately_db_KeyCondition_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return cloud.stately.db.ListProto.internal_static_stately_db_KeyCondition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            cloud.stately.db.KeyCondition.class, cloud.stately.db.KeyCondition.Builder.class);
  }

  public static final int KEY_PATH_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object keyPath_ = "";
  /**
   * <pre>
   * key_path is a valid key prefix (or full key) used to filter or optimize the list
   * operation based on the operator specified below.
   * </pre>
   *
   * <code>string key_path = 1 [json_name = "keyPath"];</code>
   * @return The keyPath.
   */
  @java.lang.Override
  public java.lang.String getKeyPath() {
    java.lang.Object ref = keyPath_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      keyPath_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * key_path is a valid key prefix (or full key) used to filter or optimize the list
   * operation based on the operator specified below.
   * </pre>
   *
   * <code>string key_path = 1 [json_name = "keyPath"];</code>
   * @return The bytes for keyPath.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeyPathBytes() {
    java.lang.Object ref = keyPath_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      keyPath_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OPERATOR_FIELD_NUMBER = 2;
  private int operator_ = 0;
  /**
   * <pre>
   * Operator indicates how to apply key_path condition to the list operation.
   * Valid options are:
   * - GREATER_THAN: key_path must be greater than the specified value
   * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
   * - LESS_THAN: key_path must be less than the specified value
   * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
   *
   * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
   * For example, regardless of sort direction, a GREATER_THAN operator
   * will still mean that a key_path must be greater than the specified value in order
   * to be included in the result set.
   * </pre>
   *
   * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
   * @return The enum numeric value on the wire for operator.
   */
  @java.lang.Override public int getOperatorValue() {
    return operator_;
  }
  /**
   * <pre>
   * Operator indicates how to apply key_path condition to the list operation.
   * Valid options are:
   * - GREATER_THAN: key_path must be greater than the specified value
   * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
   * - LESS_THAN: key_path must be less than the specified value
   * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
   *
   * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
   * For example, regardless of sort direction, a GREATER_THAN operator
   * will still mean that a key_path must be greater than the specified value in order
   * to be included in the result set.
   * </pre>
   *
   * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
   * @return The operator.
   */
  @java.lang.Override public cloud.stately.db.Operator getOperator() {
    cloud.stately.db.Operator result = cloud.stately.db.Operator.forNumber(operator_);
    return result == null ? cloud.stately.db.Operator.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(keyPath_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, keyPath_);
    }
    if (operator_ != cloud.stately.db.Operator.OPERATOR_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, operator_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(keyPath_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, keyPath_);
    }
    if (operator_ != cloud.stately.db.Operator.OPERATOR_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, operator_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof cloud.stately.db.KeyCondition)) {
      return super.equals(obj);
    }
    cloud.stately.db.KeyCondition other = (cloud.stately.db.KeyCondition) obj;

    if (!getKeyPath()
        .equals(other.getKeyPath())) return false;
    if (operator_ != other.operator_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + KEY_PATH_FIELD_NUMBER;
    hash = (53 * hash) + getKeyPath().hashCode();
    hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
    hash = (53 * hash) + operator_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static cloud.stately.db.KeyCondition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.KeyCondition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.KeyCondition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static cloud.stately.db.KeyCondition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static cloud.stately.db.KeyCondition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static cloud.stately.db.KeyCondition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(cloud.stately.db.KeyCondition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A KeyCondition is an additional constraint to be applied to the list
   * operation. It is used to filter the results based on a specific key path
   * and an operator.
   * Wherever possible, stately will apply these key conditions at the DB layer
   * to optimize the list operation latency and cost.
   * Key conditions may be combined with a key_path_prefix to further
   * optimize the list operation. HOWEVER Key conditions must share the
   * same prefix as the key_path_prefix.
   * </pre>
   *
   * Protobuf type {@code stately.db.KeyCondition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:stately.db.KeyCondition)
      cloud.stately.db.KeyConditionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cloud.stately.db.ListProto.internal_static_stately_db_KeyCondition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cloud.stately.db.ListProto.internal_static_stately_db_KeyCondition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cloud.stately.db.KeyCondition.class, cloud.stately.db.KeyCondition.Builder.class);
    }

    // Construct using cloud.stately.db.KeyCondition.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      keyPath_ = "";
      operator_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return cloud.stately.db.ListProto.internal_static_stately_db_KeyCondition_descriptor;
    }

    @java.lang.Override
    public cloud.stately.db.KeyCondition getDefaultInstanceForType() {
      return cloud.stately.db.KeyCondition.getDefaultInstance();
    }

    @java.lang.Override
    public cloud.stately.db.KeyCondition build() {
      cloud.stately.db.KeyCondition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public cloud.stately.db.KeyCondition buildPartial() {
      cloud.stately.db.KeyCondition result = new cloud.stately.db.KeyCondition(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(cloud.stately.db.KeyCondition result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.keyPath_ = keyPath_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.operator_ = operator_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof cloud.stately.db.KeyCondition) {
        return mergeFrom((cloud.stately.db.KeyCondition)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(cloud.stately.db.KeyCondition other) {
      if (other == cloud.stately.db.KeyCondition.getDefaultInstance()) return this;
      if (!other.getKeyPath().isEmpty()) {
        keyPath_ = other.keyPath_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.operator_ != 0) {
        setOperatorValue(other.getOperatorValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              keyPath_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              operator_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object keyPath_ = "";
    /**
     * <pre>
     * key_path is a valid key prefix (or full key) used to filter or optimize the list
     * operation based on the operator specified below.
     * </pre>
     *
     * <code>string key_path = 1 [json_name = "keyPath"];</code>
     * @return The keyPath.
     */
    public java.lang.String getKeyPath() {
      java.lang.Object ref = keyPath_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        keyPath_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * key_path is a valid key prefix (or full key) used to filter or optimize the list
     * operation based on the operator specified below.
     * </pre>
     *
     * <code>string key_path = 1 [json_name = "keyPath"];</code>
     * @return The bytes for keyPath.
     */
    public com.google.protobuf.ByteString
        getKeyPathBytes() {
      java.lang.Object ref = keyPath_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * key_path is a valid key prefix (or full key) used to filter or optimize the list
     * operation based on the operator specified below.
     * </pre>
     *
     * <code>string key_path = 1 [json_name = "keyPath"];</code>
     * @param value The keyPath to set.
     * @return This builder for chaining.
     */
    public Builder setKeyPath(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      keyPath_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key_path is a valid key prefix (or full key) used to filter or optimize the list
     * operation based on the operator specified below.
     * </pre>
     *
     * <code>string key_path = 1 [json_name = "keyPath"];</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyPath() {
      keyPath_ = getDefaultInstance().getKeyPath();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key_path is a valid key prefix (or full key) used to filter or optimize the list
     * operation based on the operator specified below.
     * </pre>
     *
     * <code>string key_path = 1 [json_name = "keyPath"];</code>
     * @param value The bytes for keyPath to set.
     * @return This builder for chaining.
     */
    public Builder setKeyPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      keyPath_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int operator_ = 0;
    /**
     * <pre>
     * Operator indicates how to apply key_path condition to the list operation.
     * Valid options are:
     * - GREATER_THAN: key_path must be greater than the specified value
     * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
     * - LESS_THAN: key_path must be less than the specified value
     * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
     *
     * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
     * For example, regardless of sort direction, a GREATER_THAN operator
     * will still mean that a key_path must be greater than the specified value in order
     * to be included in the result set.
     * </pre>
     *
     * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
     * @return The enum numeric value on the wire for operator.
     */
    @java.lang.Override public int getOperatorValue() {
      return operator_;
    }
    /**
     * <pre>
     * Operator indicates how to apply key_path condition to the list operation.
     * Valid options are:
     * - GREATER_THAN: key_path must be greater than the specified value
     * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
     * - LESS_THAN: key_path must be less than the specified value
     * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
     *
     * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
     * For example, regardless of sort direction, a GREATER_THAN operator
     * will still mean that a key_path must be greater than the specified value in order
     * to be included in the result set.
     * </pre>
     *
     * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
     * @param value The enum numeric value on the wire for operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperatorValue(int value) {
      operator_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Operator indicates how to apply key_path condition to the list operation.
     * Valid options are:
     * - GREATER_THAN: key_path must be greater than the specified value
     * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
     * - LESS_THAN: key_path must be less than the specified value
     * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
     *
     * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
     * For example, regardless of sort direction, a GREATER_THAN operator
     * will still mean that a key_path must be greater than the specified value in order
     * to be included in the result set.
     * </pre>
     *
     * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
     * @return The operator.
     */
    @java.lang.Override
    public cloud.stately.db.Operator getOperator() {
      cloud.stately.db.Operator result = cloud.stately.db.Operator.forNumber(operator_);
      return result == null ? cloud.stately.db.Operator.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Operator indicates how to apply key_path condition to the list operation.
     * Valid options are:
     * - GREATER_THAN: key_path must be greater than the specified value
     * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
     * - LESS_THAN: key_path must be less than the specified value
     * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
     *
     * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
     * For example, regardless of sort direction, a GREATER_THAN operator
     * will still mean that a key_path must be greater than the specified value in order
     * to be included in the result set.
     * </pre>
     *
     * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
     * @param value The operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperator(cloud.stately.db.Operator value) {
      if (value == null) { throw new NullPointerException(); }
      bitField0_ |= 0x00000002;
      operator_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Operator indicates how to apply key_path condition to the list operation.
     * Valid options are:
     * - GREATER_THAN: key_path must be greater than the specified value
     * - GREATER_THAN_OR_EQUAL: key_path must be greater than or equal to the specified value
     * - LESS_THAN: key_path must be less than the specified value
     * - LESS_THAN_OR_EQUAL: key_path must be less than or equal to the specified value
     *
     * Note: Operators are strictly evaluated they do not change meaning based on sort direction.
     * For example, regardless of sort direction, a GREATER_THAN operator
     * will still mean that a key_path must be greater than the specified value in order
     * to be included in the result set.
     * </pre>
     *
     * <code>.stately.db.Operator operator = 2 [json_name = "operator"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOperator() {
      bitField0_ = (bitField0_ & ~0x00000002);
      operator_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:stately.db.KeyCondition)
  }

  // @@protoc_insertion_point(class_scope:stately.db.KeyCondition)
  private static final cloud.stately.db.KeyCondition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new cloud.stately.db.KeyCondition();
  }

  public static cloud.stately.db.KeyCondition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KeyCondition>
      PARSER = new com.google.protobuf.AbstractParser<KeyCondition>() {
    @java.lang.Override
    public KeyCondition parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<KeyCondition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<KeyCondition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public cloud.stately.db.KeyCondition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

