// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db/transaction.proto
// Protobuf Java Version: 4.32.0

package cloud.stately.db;

/**
 * <pre>
 * TransactionBeginList is a subset of the ListRequest message, for listing within
 * the context of a transaction.
 * </pre>
 *
 * Protobuf type {@code stately.db.TransactionBeginList}
 */
@com.google.protobuf.Generated
public final class TransactionBeginList extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:stately.db.TransactionBeginList)
    TransactionBeginListOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 0,
      /* suffix= */ "",
      TransactionBeginList.class.getName());
  }
  // Use TransactionBeginList.newBuilder() to construct.
  private TransactionBeginList(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private TransactionBeginList() {
    keyPathPrefix_ = "";
    sortDirection_ = 0;
    filterConditions_ = java.util.Collections.emptyList();
    keyConditions_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return cloud.stately.db.TransactionProto.internal_static_stately_db_TransactionBeginList_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return cloud.stately.db.TransactionProto.internal_static_stately_db_TransactionBeginList_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            cloud.stately.db.TransactionBeginList.class, cloud.stately.db.TransactionBeginList.Builder.class);
  }

  public static final int KEY_PATH_PREFIX_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object keyPathPrefix_ = "";
  /**
   * <pre>
   * key_path_prefix is the a prefix that limits what items we will return. This
   * must contain at least a root segment. See Item#key_path for more details.
   * </pre>
   *
   * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
   * @return The keyPathPrefix.
   */
  @java.lang.Override
  public java.lang.String getKeyPathPrefix() {
    java.lang.Object ref = keyPathPrefix_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      keyPathPrefix_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * key_path_prefix is the a prefix that limits what items we will return. This
   * must contain at least a root segment. See Item#key_path for more details.
   * </pre>
   *
   * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
   * @return The bytes for keyPathPrefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeyPathPrefixBytes() {
    java.lang.Object ref = keyPathPrefix_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      keyPathPrefix_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LIMIT_FIELD_NUMBER = 2;
  private int limit_ = 0;
  /**
   * <pre>
   * limit is the maximum number of items to return. If this is not specified or
   * set to 0, it will be unlimited. Fewer items than the limit may be
   * returned even if there are more items to get - make sure to check
   * token.can_continue.
   * </pre>
   *
   * <code>uint32 limit = 2 [json_name = "limit"];</code>
   * @return The limit.
   */
  @java.lang.Override
  public int getLimit() {
    return limit_;
  }

  public static final int SORT_DIRECTION_FIELD_NUMBER = 4;
  private int sortDirection_ = 0;
  /**
   * <pre>
   * sort_direction is the direction to sort the results in. If this is not set,
   * we will sort in ascending order.
   * </pre>
   *
   * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
   * @return The enum numeric value on the wire for sortDirection.
   */
  @java.lang.Override public int getSortDirectionValue() {
    return sortDirection_;
  }
  /**
   * <pre>
   * sort_direction is the direction to sort the results in. If this is not set,
   * we will sort in ascending order.
   * </pre>
   *
   * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
   * @return The sortDirection.
   */
  @java.lang.Override public cloud.stately.db.SortDirection getSortDirection() {
    cloud.stately.db.SortDirection result = cloud.stately.db.SortDirection.forNumber(sortDirection_);
    return result == null ? cloud.stately.db.SortDirection.UNRECOGNIZED : result;
  }

  public static final int FILTER_CONDITIONS_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private java.util.List<cloud.stately.db.FilterCondition> filterConditions_;
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  @java.lang.Override
  public java.util.List<cloud.stately.db.FilterCondition> getFilterConditionsList() {
    return filterConditions_;
  }
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends cloud.stately.db.FilterConditionOrBuilder> 
      getFilterConditionsOrBuilderList() {
    return filterConditions_;
  }
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  @java.lang.Override
  public int getFilterConditionsCount() {
    return filterConditions_.size();
  }
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  @java.lang.Override
  public cloud.stately.db.FilterCondition getFilterConditions(int index) {
    return filterConditions_.get(index);
  }
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  @java.lang.Override
  public cloud.stately.db.FilterConditionOrBuilder getFilterConditionsOrBuilder(
      int index) {
    return filterConditions_.get(index);
  }

  public static final int KEY_CONDITIONS_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<cloud.stately.db.KeyCondition> keyConditions_;
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  @java.lang.Override
  public java.util.List<cloud.stately.db.KeyCondition> getKeyConditionsList() {
    return keyConditions_;
  }
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends cloud.stately.db.KeyConditionOrBuilder> 
      getKeyConditionsOrBuilderList() {
    return keyConditions_;
  }
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  @java.lang.Override
  public int getKeyConditionsCount() {
    return keyConditions_.size();
  }
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  @java.lang.Override
  public cloud.stately.db.KeyCondition getKeyConditions(int index) {
    return keyConditions_.get(index);
  }
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  @java.lang.Override
  public cloud.stately.db.KeyConditionOrBuilder getKeyConditionsOrBuilder(
      int index) {
    return keyConditions_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(keyPathPrefix_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, keyPathPrefix_);
    }
    if (limit_ != 0) {
      output.writeUInt32(2, limit_);
    }
    if (sortDirection_ != cloud.stately.db.SortDirection.SORT_ASCENDING.getNumber()) {
      output.writeEnum(4, sortDirection_);
    }
    for (int i = 0; i < filterConditions_.size(); i++) {
      output.writeMessage(9, filterConditions_.get(i));
    }
    for (int i = 0; i < keyConditions_.size(); i++) {
      output.writeMessage(10, keyConditions_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(keyPathPrefix_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, keyPathPrefix_);
    }
    if (limit_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, limit_);
    }
    if (sortDirection_ != cloud.stately.db.SortDirection.SORT_ASCENDING.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, sortDirection_);
    }
    for (int i = 0; i < filterConditions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, filterConditions_.get(i));
    }
    for (int i = 0; i < keyConditions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, keyConditions_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof cloud.stately.db.TransactionBeginList)) {
      return super.equals(obj);
    }
    cloud.stately.db.TransactionBeginList other = (cloud.stately.db.TransactionBeginList) obj;

    if (!getKeyPathPrefix()
        .equals(other.getKeyPathPrefix())) return false;
    if (getLimit()
        != other.getLimit()) return false;
    if (sortDirection_ != other.sortDirection_) return false;
    if (!getFilterConditionsList()
        .equals(other.getFilterConditionsList())) return false;
    if (!getKeyConditionsList()
        .equals(other.getKeyConditionsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + KEY_PATH_PREFIX_FIELD_NUMBER;
    hash = (53 * hash) + getKeyPathPrefix().hashCode();
    hash = (37 * hash) + LIMIT_FIELD_NUMBER;
    hash = (53 * hash) + getLimit();
    hash = (37 * hash) + SORT_DIRECTION_FIELD_NUMBER;
    hash = (53 * hash) + sortDirection_;
    if (getFilterConditionsCount() > 0) {
      hash = (37 * hash) + FILTER_CONDITIONS_FIELD_NUMBER;
      hash = (53 * hash) + getFilterConditionsList().hashCode();
    }
    if (getKeyConditionsCount() > 0) {
      hash = (37 * hash) + KEY_CONDITIONS_FIELD_NUMBER;
      hash = (53 * hash) + getKeyConditionsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static cloud.stately.db.TransactionBeginList parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static cloud.stately.db.TransactionBeginList parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static cloud.stately.db.TransactionBeginList parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static cloud.stately.db.TransactionBeginList parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(cloud.stately.db.TransactionBeginList prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TransactionBeginList is a subset of the ListRequest message, for listing within
   * the context of a transaction.
   * </pre>
   *
   * Protobuf type {@code stately.db.TransactionBeginList}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:stately.db.TransactionBeginList)
      cloud.stately.db.TransactionBeginListOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cloud.stately.db.TransactionProto.internal_static_stately_db_TransactionBeginList_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cloud.stately.db.TransactionProto.internal_static_stately_db_TransactionBeginList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cloud.stately.db.TransactionBeginList.class, cloud.stately.db.TransactionBeginList.Builder.class);
    }

    // Construct using cloud.stately.db.TransactionBeginList.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      keyPathPrefix_ = "";
      limit_ = 0;
      sortDirection_ = 0;
      if (filterConditionsBuilder_ == null) {
        filterConditions_ = java.util.Collections.emptyList();
      } else {
        filterConditions_ = null;
        filterConditionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (keyConditionsBuilder_ == null) {
        keyConditions_ = java.util.Collections.emptyList();
      } else {
        keyConditions_ = null;
        keyConditionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return cloud.stately.db.TransactionProto.internal_static_stately_db_TransactionBeginList_descriptor;
    }

    @java.lang.Override
    public cloud.stately.db.TransactionBeginList getDefaultInstanceForType() {
      return cloud.stately.db.TransactionBeginList.getDefaultInstance();
    }

    @java.lang.Override
    public cloud.stately.db.TransactionBeginList build() {
      cloud.stately.db.TransactionBeginList result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public cloud.stately.db.TransactionBeginList buildPartial() {
      cloud.stately.db.TransactionBeginList result = new cloud.stately.db.TransactionBeginList(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(cloud.stately.db.TransactionBeginList result) {
      if (filterConditionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          filterConditions_ = java.util.Collections.unmodifiableList(filterConditions_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.filterConditions_ = filterConditions_;
      } else {
        result.filterConditions_ = filterConditionsBuilder_.build();
      }
      if (keyConditionsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          keyConditions_ = java.util.Collections.unmodifiableList(keyConditions_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.keyConditions_ = keyConditions_;
      } else {
        result.keyConditions_ = keyConditionsBuilder_.build();
      }
    }

    private void buildPartial0(cloud.stately.db.TransactionBeginList result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.keyPathPrefix_ = keyPathPrefix_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.limit_ = limit_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.sortDirection_ = sortDirection_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof cloud.stately.db.TransactionBeginList) {
        return mergeFrom((cloud.stately.db.TransactionBeginList)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(cloud.stately.db.TransactionBeginList other) {
      if (other == cloud.stately.db.TransactionBeginList.getDefaultInstance()) return this;
      if (!other.getKeyPathPrefix().isEmpty()) {
        keyPathPrefix_ = other.keyPathPrefix_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getLimit() != 0) {
        setLimit(other.getLimit());
      }
      if (other.sortDirection_ != 0) {
        setSortDirectionValue(other.getSortDirectionValue());
      }
      if (filterConditionsBuilder_ == null) {
        if (!other.filterConditions_.isEmpty()) {
          if (filterConditions_.isEmpty()) {
            filterConditions_ = other.filterConditions_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFilterConditionsIsMutable();
            filterConditions_.addAll(other.filterConditions_);
          }
          onChanged();
        }
      } else {
        if (!other.filterConditions_.isEmpty()) {
          if (filterConditionsBuilder_.isEmpty()) {
            filterConditionsBuilder_.dispose();
            filterConditionsBuilder_ = null;
            filterConditions_ = other.filterConditions_;
            bitField0_ = (bitField0_ & ~0x00000008);
            filterConditionsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 internalGetFilterConditionsFieldBuilder() : null;
          } else {
            filterConditionsBuilder_.addAllMessages(other.filterConditions_);
          }
        }
      }
      if (keyConditionsBuilder_ == null) {
        if (!other.keyConditions_.isEmpty()) {
          if (keyConditions_.isEmpty()) {
            keyConditions_ = other.keyConditions_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureKeyConditionsIsMutable();
            keyConditions_.addAll(other.keyConditions_);
          }
          onChanged();
        }
      } else {
        if (!other.keyConditions_.isEmpty()) {
          if (keyConditionsBuilder_.isEmpty()) {
            keyConditionsBuilder_.dispose();
            keyConditionsBuilder_ = null;
            keyConditions_ = other.keyConditions_;
            bitField0_ = (bitField0_ & ~0x00000010);
            keyConditionsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 internalGetKeyConditionsFieldBuilder() : null;
          } else {
            keyConditionsBuilder_.addAllMessages(other.keyConditions_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              keyPathPrefix_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              limit_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 32: {
              sortDirection_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 32
            case 74: {
              cloud.stately.db.FilterCondition m =
                  input.readMessage(
                      cloud.stately.db.FilterCondition.parser(),
                      extensionRegistry);
              if (filterConditionsBuilder_ == null) {
                ensureFilterConditionsIsMutable();
                filterConditions_.add(m);
              } else {
                filterConditionsBuilder_.addMessage(m);
              }
              break;
            } // case 74
            case 82: {
              cloud.stately.db.KeyCondition m =
                  input.readMessage(
                      cloud.stately.db.KeyCondition.parser(),
                      extensionRegistry);
              if (keyConditionsBuilder_ == null) {
                ensureKeyConditionsIsMutable();
                keyConditions_.add(m);
              } else {
                keyConditionsBuilder_.addMessage(m);
              }
              break;
            } // case 82
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object keyPathPrefix_ = "";
    /**
     * <pre>
     * key_path_prefix is the a prefix that limits what items we will return. This
     * must contain at least a root segment. See Item#key_path for more details.
     * </pre>
     *
     * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
     * @return The keyPathPrefix.
     */
    public java.lang.String getKeyPathPrefix() {
      java.lang.Object ref = keyPathPrefix_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        keyPathPrefix_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * key_path_prefix is the a prefix that limits what items we will return. This
     * must contain at least a root segment. See Item#key_path for more details.
     * </pre>
     *
     * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
     * @return The bytes for keyPathPrefix.
     */
    public com.google.protobuf.ByteString
        getKeyPathPrefixBytes() {
      java.lang.Object ref = keyPathPrefix_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        keyPathPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * key_path_prefix is the a prefix that limits what items we will return. This
     * must contain at least a root segment. See Item#key_path for more details.
     * </pre>
     *
     * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
     * @param value The keyPathPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setKeyPathPrefix(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      keyPathPrefix_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key_path_prefix is the a prefix that limits what items we will return. This
     * must contain at least a root segment. See Item#key_path for more details.
     * </pre>
     *
     * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
     * @return This builder for chaining.
     */
    public Builder clearKeyPathPrefix() {
      keyPathPrefix_ = getDefaultInstance().getKeyPathPrefix();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * key_path_prefix is the a prefix that limits what items we will return. This
     * must contain at least a root segment. See Item#key_path for more details.
     * </pre>
     *
     * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
     * @param value The bytes for keyPathPrefix to set.
     * @return This builder for chaining.
     */
    public Builder setKeyPathPrefixBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      keyPathPrefix_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int limit_ ;
    /**
     * <pre>
     * limit is the maximum number of items to return. If this is not specified or
     * set to 0, it will be unlimited. Fewer items than the limit may be
     * returned even if there are more items to get - make sure to check
     * token.can_continue.
     * </pre>
     *
     * <code>uint32 limit = 2 [json_name = "limit"];</code>
     * @return The limit.
     */
    @java.lang.Override
    public int getLimit() {
      return limit_;
    }
    /**
     * <pre>
     * limit is the maximum number of items to return. If this is not specified or
     * set to 0, it will be unlimited. Fewer items than the limit may be
     * returned even if there are more items to get - make sure to check
     * token.can_continue.
     * </pre>
     *
     * <code>uint32 limit = 2 [json_name = "limit"];</code>
     * @param value The limit to set.
     * @return This builder for chaining.
     */
    public Builder setLimit(int value) {

      limit_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * limit is the maximum number of items to return. If this is not specified or
     * set to 0, it will be unlimited. Fewer items than the limit may be
     * returned even if there are more items to get - make sure to check
     * token.can_continue.
     * </pre>
     *
     * <code>uint32 limit = 2 [json_name = "limit"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLimit() {
      bitField0_ = (bitField0_ & ~0x00000002);
      limit_ = 0;
      onChanged();
      return this;
    }

    private int sortDirection_ = 0;
    /**
     * <pre>
     * sort_direction is the direction to sort the results in. If this is not set,
     * we will sort in ascending order.
     * </pre>
     *
     * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
     * @return The enum numeric value on the wire for sortDirection.
     */
    @java.lang.Override public int getSortDirectionValue() {
      return sortDirection_;
    }
    /**
     * <pre>
     * sort_direction is the direction to sort the results in. If this is not set,
     * we will sort in ascending order.
     * </pre>
     *
     * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
     * @param value The enum numeric value on the wire for sortDirection to set.
     * @return This builder for chaining.
     */
    public Builder setSortDirectionValue(int value) {
      sortDirection_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sort_direction is the direction to sort the results in. If this is not set,
     * we will sort in ascending order.
     * </pre>
     *
     * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
     * @return The sortDirection.
     */
    @java.lang.Override
    public cloud.stately.db.SortDirection getSortDirection() {
      cloud.stately.db.SortDirection result = cloud.stately.db.SortDirection.forNumber(sortDirection_);
      return result == null ? cloud.stately.db.SortDirection.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * sort_direction is the direction to sort the results in. If this is not set,
     * we will sort in ascending order.
     * </pre>
     *
     * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
     * @param value The sortDirection to set.
     * @return This builder for chaining.
     */
    public Builder setSortDirection(cloud.stately.db.SortDirection value) {
      if (value == null) { throw new NullPointerException(); }
      bitField0_ |= 0x00000004;
      sortDirection_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sort_direction is the direction to sort the results in. If this is not set,
     * we will sort in ascending order.
     * </pre>
     *
     * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSortDirection() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sortDirection_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<cloud.stately.db.FilterCondition> filterConditions_ =
      java.util.Collections.emptyList();
    private void ensureFilterConditionsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        filterConditions_ = new java.util.ArrayList<cloud.stately.db.FilterCondition>(filterConditions_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        cloud.stately.db.FilterCondition, cloud.stately.db.FilterCondition.Builder, cloud.stately.db.FilterConditionOrBuilder> filterConditionsBuilder_;

    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public java.util.List<cloud.stately.db.FilterCondition> getFilterConditionsList() {
      if (filterConditionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filterConditions_);
      } else {
        return filterConditionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public int getFilterConditionsCount() {
      if (filterConditionsBuilder_ == null) {
        return filterConditions_.size();
      } else {
        return filterConditionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public cloud.stately.db.FilterCondition getFilterConditions(int index) {
      if (filterConditionsBuilder_ == null) {
        return filterConditions_.get(index);
      } else {
        return filterConditionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder setFilterConditions(
        int index, cloud.stately.db.FilterCondition value) {
      if (filterConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilterConditionsIsMutable();
        filterConditions_.set(index, value);
        onChanged();
      } else {
        filterConditionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder setFilterConditions(
        int index, cloud.stately.db.FilterCondition.Builder builderForValue) {
      if (filterConditionsBuilder_ == null) {
        ensureFilterConditionsIsMutable();
        filterConditions_.set(index, builderForValue.build());
        onChanged();
      } else {
        filterConditionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder addFilterConditions(cloud.stately.db.FilterCondition value) {
      if (filterConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilterConditionsIsMutable();
        filterConditions_.add(value);
        onChanged();
      } else {
        filterConditionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder addFilterConditions(
        int index, cloud.stately.db.FilterCondition value) {
      if (filterConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFilterConditionsIsMutable();
        filterConditions_.add(index, value);
        onChanged();
      } else {
        filterConditionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder addFilterConditions(
        cloud.stately.db.FilterCondition.Builder builderForValue) {
      if (filterConditionsBuilder_ == null) {
        ensureFilterConditionsIsMutable();
        filterConditions_.add(builderForValue.build());
        onChanged();
      } else {
        filterConditionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder addFilterConditions(
        int index, cloud.stately.db.FilterCondition.Builder builderForValue) {
      if (filterConditionsBuilder_ == null) {
        ensureFilterConditionsIsMutable();
        filterConditions_.add(index, builderForValue.build());
        onChanged();
      } else {
        filterConditionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder addAllFilterConditions(
        java.lang.Iterable<? extends cloud.stately.db.FilterCondition> values) {
      if (filterConditionsBuilder_ == null) {
        ensureFilterConditionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, filterConditions_);
        onChanged();
      } else {
        filterConditionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder clearFilterConditions() {
      if (filterConditionsBuilder_ == null) {
        filterConditions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        filterConditionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public Builder removeFilterConditions(int index) {
      if (filterConditionsBuilder_ == null) {
        ensureFilterConditionsIsMutable();
        filterConditions_.remove(index);
        onChanged();
      } else {
        filterConditionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public cloud.stately.db.FilterCondition.Builder getFilterConditionsBuilder(
        int index) {
      return internalGetFilterConditionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public cloud.stately.db.FilterConditionOrBuilder getFilterConditionsOrBuilder(
        int index) {
      if (filterConditionsBuilder_ == null) {
        return filterConditions_.get(index);  } else {
        return filterConditionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public java.util.List<? extends cloud.stately.db.FilterConditionOrBuilder> 
         getFilterConditionsOrBuilderList() {
      if (filterConditionsBuilder_ != null) {
        return filterConditionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filterConditions_);
      }
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public cloud.stately.db.FilterCondition.Builder addFilterConditionsBuilder() {
      return internalGetFilterConditionsFieldBuilder().addBuilder(
          cloud.stately.db.FilterCondition.getDefaultInstance());
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public cloud.stately.db.FilterCondition.Builder addFilterConditionsBuilder(
        int index) {
      return internalGetFilterConditionsFieldBuilder().addBuilder(
          index, cloud.stately.db.FilterCondition.getDefaultInstance());
    }
    /**
     * <pre>
     * filter_conditions are a set of conditions to filter the list result by.
     * If no conditions are provided, all items in the store will be returned.
     * Filter conditions are combined with OR.
     * </pre>
     *
     * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
     */
    public java.util.List<cloud.stately.db.FilterCondition.Builder> 
         getFilterConditionsBuilderList() {
      return internalGetFilterConditionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        cloud.stately.db.FilterCondition, cloud.stately.db.FilterCondition.Builder, cloud.stately.db.FilterConditionOrBuilder> 
        internalGetFilterConditionsFieldBuilder() {
      if (filterConditionsBuilder_ == null) {
        filterConditionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            cloud.stately.db.FilterCondition, cloud.stately.db.FilterCondition.Builder, cloud.stately.db.FilterConditionOrBuilder>(
                filterConditions_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        filterConditions_ = null;
      }
      return filterConditionsBuilder_;
    }

    private java.util.List<cloud.stately.db.KeyCondition> keyConditions_ =
      java.util.Collections.emptyList();
    private void ensureKeyConditionsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        keyConditions_ = new java.util.ArrayList<cloud.stately.db.KeyCondition>(keyConditions_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        cloud.stately.db.KeyCondition, cloud.stately.db.KeyCondition.Builder, cloud.stately.db.KeyConditionOrBuilder> keyConditionsBuilder_;

    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public java.util.List<cloud.stately.db.KeyCondition> getKeyConditionsList() {
      if (keyConditionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(keyConditions_);
      } else {
        return keyConditionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public int getKeyConditionsCount() {
      if (keyConditionsBuilder_ == null) {
        return keyConditions_.size();
      } else {
        return keyConditionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public cloud.stately.db.KeyCondition getKeyConditions(int index) {
      if (keyConditionsBuilder_ == null) {
        return keyConditions_.get(index);
      } else {
        return keyConditionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder setKeyConditions(
        int index, cloud.stately.db.KeyCondition value) {
      if (keyConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeyConditionsIsMutable();
        keyConditions_.set(index, value);
        onChanged();
      } else {
        keyConditionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder setKeyConditions(
        int index, cloud.stately.db.KeyCondition.Builder builderForValue) {
      if (keyConditionsBuilder_ == null) {
        ensureKeyConditionsIsMutable();
        keyConditions_.set(index, builderForValue.build());
        onChanged();
      } else {
        keyConditionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder addKeyConditions(cloud.stately.db.KeyCondition value) {
      if (keyConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeyConditionsIsMutable();
        keyConditions_.add(value);
        onChanged();
      } else {
        keyConditionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder addKeyConditions(
        int index, cloud.stately.db.KeyCondition value) {
      if (keyConditionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureKeyConditionsIsMutable();
        keyConditions_.add(index, value);
        onChanged();
      } else {
        keyConditionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder addKeyConditions(
        cloud.stately.db.KeyCondition.Builder builderForValue) {
      if (keyConditionsBuilder_ == null) {
        ensureKeyConditionsIsMutable();
        keyConditions_.add(builderForValue.build());
        onChanged();
      } else {
        keyConditionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder addKeyConditions(
        int index, cloud.stately.db.KeyCondition.Builder builderForValue) {
      if (keyConditionsBuilder_ == null) {
        ensureKeyConditionsIsMutable();
        keyConditions_.add(index, builderForValue.build());
        onChanged();
      } else {
        keyConditionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder addAllKeyConditions(
        java.lang.Iterable<? extends cloud.stately.db.KeyCondition> values) {
      if (keyConditionsBuilder_ == null) {
        ensureKeyConditionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, keyConditions_);
        onChanged();
      } else {
        keyConditionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder clearKeyConditions() {
      if (keyConditionsBuilder_ == null) {
        keyConditions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        keyConditionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public Builder removeKeyConditions(int index) {
      if (keyConditionsBuilder_ == null) {
        ensureKeyConditionsIsMutable();
        keyConditions_.remove(index);
        onChanged();
      } else {
        keyConditionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public cloud.stately.db.KeyCondition.Builder getKeyConditionsBuilder(
        int index) {
      return internalGetKeyConditionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public cloud.stately.db.KeyConditionOrBuilder getKeyConditionsOrBuilder(
        int index) {
      if (keyConditionsBuilder_ == null) {
        return keyConditions_.get(index);  } else {
        return keyConditionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public java.util.List<? extends cloud.stately.db.KeyConditionOrBuilder> 
         getKeyConditionsOrBuilderList() {
      if (keyConditionsBuilder_ != null) {
        return keyConditionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(keyConditions_);
      }
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public cloud.stately.db.KeyCondition.Builder addKeyConditionsBuilder() {
      return internalGetKeyConditionsFieldBuilder().addBuilder(
          cloud.stately.db.KeyCondition.getDefaultInstance());
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public cloud.stately.db.KeyCondition.Builder addKeyConditionsBuilder(
        int index) {
      return internalGetKeyConditionsFieldBuilder().addBuilder(
          index, cloud.stately.db.KeyCondition.getDefaultInstance());
    }
    /**
     * <pre>
     * key_conditions are a set of conditions to apply to the list operation.
     * Wherever possible, Stately will apply these key conditions at the DB layer
     * to optimize the list operation cost.
     *
     * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
     * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
     * a "between" condition on the key path.
     *
     * If these conditions are provided they must share the same prefix as the
     * key_path_prefix. For example this is valid:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/namespace-44"
     * operator: GREATER_THAN_OR_EQUAL
     * - key_path: "/group-:groupID/namespace-100"
     * operator: LESS_THAN_OR_EQUAL
     *
     * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
     * with the key conditions.
     *
     * The following is NOT valid because the key_path_prefix does not
     * share the same prefix as the key conditions:
     *
     * key_path_prefix: "/group-:groupID/namespace"
     * key_conditions:
     * - key_path: "/group-:groupID/beatles-1984"
     * operator: GREATER_THAN_OR_EQUAL
     * </pre>
     *
     * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
     */
    public java.util.List<cloud.stately.db.KeyCondition.Builder> 
         getKeyConditionsBuilderList() {
      return internalGetKeyConditionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        cloud.stately.db.KeyCondition, cloud.stately.db.KeyCondition.Builder, cloud.stately.db.KeyConditionOrBuilder> 
        internalGetKeyConditionsFieldBuilder() {
      if (keyConditionsBuilder_ == null) {
        keyConditionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            cloud.stately.db.KeyCondition, cloud.stately.db.KeyCondition.Builder, cloud.stately.db.KeyConditionOrBuilder>(
                keyConditions_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        keyConditions_ = null;
      }
      return keyConditionsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:stately.db.TransactionBeginList)
  }

  // @@protoc_insertion_point(class_scope:stately.db.TransactionBeginList)
  private static final cloud.stately.db.TransactionBeginList DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new cloud.stately.db.TransactionBeginList();
  }

  public static cloud.stately.db.TransactionBeginList getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TransactionBeginList>
      PARSER = new com.google.protobuf.AbstractParser<TransactionBeginList>() {
    @java.lang.Override
    public TransactionBeginList parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TransactionBeginList> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TransactionBeginList> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public cloud.stately.db.TransactionBeginList getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

