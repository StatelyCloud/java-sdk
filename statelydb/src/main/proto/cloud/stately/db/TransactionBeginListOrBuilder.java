// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db/transaction.proto
// Protobuf Java Version: 4.32.0

package cloud.stately.db;

@com.google.protobuf.Generated
public interface TransactionBeginListOrBuilder extends
    // @@protoc_insertion_point(interface_extends:stately.db.TransactionBeginList)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * key_path_prefix is the a prefix that limits what items we will return. This
   * must contain at least a root segment. See Item#key_path for more details.
   * </pre>
   *
   * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
   * @return The keyPathPrefix.
   */
  java.lang.String getKeyPathPrefix();
  /**
   * <pre>
   * key_path_prefix is the a prefix that limits what items we will return. This
   * must contain at least a root segment. See Item#key_path for more details.
   * </pre>
   *
   * <code>string key_path_prefix = 1 [json_name = "keyPathPrefix"];</code>
   * @return The bytes for keyPathPrefix.
   */
  com.google.protobuf.ByteString
      getKeyPathPrefixBytes();

  /**
   * <pre>
   * limit is the maximum number of items to return. If this is not specified or
   * set to 0, it will be unlimited. Fewer items than the limit may be
   * returned even if there are more items to get - make sure to check
   * token.can_continue.
   * </pre>
   *
   * <code>uint32 limit = 2 [json_name = "limit"];</code>
   * @return The limit.
   */
  int getLimit();

  /**
   * <pre>
   * sort_direction is the direction to sort the results in. If this is not set,
   * we will sort in ascending order.
   * </pre>
   *
   * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
   * @return The enum numeric value on the wire for sortDirection.
   */
  int getSortDirectionValue();
  /**
   * <pre>
   * sort_direction is the direction to sort the results in. If this is not set,
   * we will sort in ascending order.
   * </pre>
   *
   * <code>.stately.db.SortDirection sort_direction = 4 [json_name = "sortDirection"];</code>
   * @return The sortDirection.
   */
  cloud.stately.db.SortDirection getSortDirection();

  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  java.util.List<cloud.stately.db.FilterCondition> 
      getFilterConditionsList();
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  cloud.stately.db.FilterCondition getFilterConditions(int index);
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  int getFilterConditionsCount();
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  java.util.List<? extends cloud.stately.db.FilterConditionOrBuilder> 
      getFilterConditionsOrBuilderList();
  /**
   * <pre>
   * filter_conditions are a set of conditions to filter the list result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 9 [json_name = "filterConditions"];</code>
   */
  cloud.stately.db.FilterConditionOrBuilder getFilterConditionsOrBuilder(
      int index);

  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  java.util.List<cloud.stately.db.KeyCondition> 
      getKeyConditionsList();
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  cloud.stately.db.KeyCondition getKeyConditions(int index);
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  int getKeyConditionsCount();
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  java.util.List<? extends cloud.stately.db.KeyConditionOrBuilder> 
      getKeyConditionsOrBuilderList();
  /**
   * <pre>
   * key_conditions are a set of conditions to apply to the list operation.
   * Wherever possible, Stately will apply these key conditions at the DB layer
   * to optimize the list operation cost.
   *
   * A maximum of two key conditions are allowed, one with a GREATER_THAN (or equal to)
   * operator and one with a LESS_THAN (or equal to) operator. Together these amount to
   * a "between" condition on the key path.
   *
   * If these conditions are provided they must share the same prefix as the
   * key_path_prefix. For example this is valid:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/namespace-44"
   * operator: GREATER_THAN_OR_EQUAL
   * - key_path: "/group-:groupID/namespace-100"
   * operator: LESS_THAN_OR_EQUAL
   *
   * A key_path_prefix of "/group-:groupID" would also be valid above, as the prefix is shared
   * with the key conditions.
   *
   * The following is NOT valid because the key_path_prefix does not
   * share the same prefix as the key conditions:
   *
   * key_path_prefix: "/group-:groupID/namespace"
   * key_conditions:
   * - key_path: "/group-:groupID/beatles-1984"
   * operator: GREATER_THAN_OR_EQUAL
   * </pre>
   *
   * <code>repeated .stately.db.KeyCondition key_conditions = 10 [json_name = "keyConditions"];</code>
   */
  cloud.stately.db.KeyConditionOrBuilder getKeyConditionsOrBuilder(
      int index);
}
