// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db/continue_list.proto
// Protobuf Java Version: 4.32.0

package cloud.stately.db;

@com.google.protobuf.Generated
public interface ContinueListRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:stately.db.ContinueListRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * token_data is an opaque list continuation token returned by a previous call to
   * BeginList, ContinueList, or SyncList.
   * </pre>
   *
   * <code>bytes token_data = 1 [json_name = "tokenData"];</code>
   * @return The tokenData.
   */
  com.google.protobuf.ByteString getTokenData();

  /**
   * <pre>
   * direction indicates whether we are expanding the result set (paginating)
   * forward (in the direction of the original List operation) or backward (in
   * the opposite direction). The default is to expand forward.
   * </pre>
   *
   * <code>.stately.db.ContinueListDirection direction = 2 [json_name = "direction"];</code>
   * @return The enum numeric value on the wire for direction.
   */
  int getDirectionValue();
  /**
   * <pre>
   * direction indicates whether we are expanding the result set (paginating)
   * forward (in the direction of the original List operation) or backward (in
   * the opposite direction). The default is to expand forward.
   * </pre>
   *
   * <code>.stately.db.ContinueListDirection direction = 2 [json_name = "direction"];</code>
   * @return The direction.
   */
  cloud.stately.db.ContinueListDirection getDirection();

  /**
   * <pre>
   * schema_version_id is the schema version id the client is using. This is
   * used to ensure the same schema version is used across each page of the list.
   * If the version the token was created with is different from the client's
   * current version, the operation will error with SchemaVersionMismatch error,
   * in which case you should start over with a fresh BeginList call.
   * </pre>
   *
   * <code>uint32 schema_version_id = 5 [json_name = "schemaVersionId"];</code>
   * @return The schemaVersionId.
   */
  int getSchemaVersionId();

  /**
   * <pre>
   * schema_id refers to the schema to use for this operation.
   * If the store_id does not have a schema with this ID, the operation will
   * error with SchemaNotFound error. You should not have to set this manually
   * as your generated SDK should know its schema and wire this in for you.
   * </pre>
   *
   * <code>uint64 schema_id = 6 [json_name = "schemaId"];</code>
   * @return The schemaId.
   */
  long getSchemaId();
}
