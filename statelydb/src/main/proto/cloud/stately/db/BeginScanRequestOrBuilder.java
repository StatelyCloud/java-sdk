// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db/scan.proto
// Protobuf Java Version: 4.32.0

package cloud.stately.db;

@com.google.protobuf.Generated
public interface BeginScanRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:stately.db.BeginScanRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * store_id is a globally unique Store ID, which can be looked up from the
   * console or CLI.
   * </pre>
   *
   * <code>uint64 store_id = 1 [json_name = "storeId"];</code>
   * @return The storeId.
   */
  long getStoreId();

  /**
   * <pre>
   * filter_conditions is a set of conditions to filter the scan result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 2 [json_name = "filterConditions"];</code>
   */
  java.util.List<cloud.stately.db.FilterCondition> 
      getFilterConditionsList();
  /**
   * <pre>
   * filter_conditions is a set of conditions to filter the scan result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 2 [json_name = "filterConditions"];</code>
   */
  cloud.stately.db.FilterCondition getFilterConditions(int index);
  /**
   * <pre>
   * filter_conditions is a set of conditions to filter the scan result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 2 [json_name = "filterConditions"];</code>
   */
  int getFilterConditionsCount();
  /**
   * <pre>
   * filter_conditions is a set of conditions to filter the scan result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 2 [json_name = "filterConditions"];</code>
   */
  java.util.List<? extends cloud.stately.db.FilterConditionOrBuilder> 
      getFilterConditionsOrBuilderList();
  /**
   * <pre>
   * filter_conditions is a set of conditions to filter the scan result by.
   * If no conditions are provided, all items in the store will be returned.
   * Filter conditions are combined with OR.
   * </pre>
   *
   * <code>repeated .stately.db.FilterCondition filter_conditions = 2 [json_name = "filterConditions"];</code>
   */
  cloud.stately.db.FilterConditionOrBuilder getFilterConditionsOrBuilder(
      int index);

  /**
   * <pre>
   * limit is the maximum number of items to return. If this is not specified or
   * set to 0, it will return one server side page of items, which may contain zero of your selected
   * item types and hence be an empty response.
   * Be sure to check token.can_continue to see if you have more items left to fetch.
   * </pre>
   *
   * <code>uint32 limit = 3 [json_name = "limit"];</code>
   * @return The limit.
   */
  int getLimit();

  /**
   * <pre>
   * segmentation_params is used to enable parallelization of the list operation.
   * This is useful for bulk processing of large stores.
   * If this field is set then the list operation will be split into segment_params.total_segments
   * and this request will process the segment defined in segmentation_params.segment_index.
   * See SegmentationParams for more details.
   * Please be warned that parallelization will result on increase throughput to your store
   * which may result in throttling.
   * </pre>
   *
   * <code>.stately.db.SegmentationParams segmentation_params = 4 [json_name = "segmentationParams"];</code>
   * @return Whether the segmentationParams field is set.
   */
  boolean hasSegmentationParams();
  /**
   * <pre>
   * segmentation_params is used to enable parallelization of the list operation.
   * This is useful for bulk processing of large stores.
   * If this field is set then the list operation will be split into segment_params.total_segments
   * and this request will process the segment defined in segmentation_params.segment_index.
   * See SegmentationParams for more details.
   * Please be warned that parallelization will result on increase throughput to your store
   * which may result in throttling.
   * </pre>
   *
   * <code>.stately.db.SegmentationParams segmentation_params = 4 [json_name = "segmentationParams"];</code>
   * @return The segmentationParams.
   */
  cloud.stately.db.SegmentationParams getSegmentationParams();
  /**
   * <pre>
   * segmentation_params is used to enable parallelization of the list operation.
   * This is useful for bulk processing of large stores.
   * If this field is set then the list operation will be split into segment_params.total_segments
   * and this request will process the segment defined in segmentation_params.segment_index.
   * See SegmentationParams for more details.
   * Please be warned that parallelization will result on increase throughput to your store
   * which may result in throttling.
   * </pre>
   *
   * <code>.stately.db.SegmentationParams segmentation_params = 4 [json_name = "segmentationParams"];</code>
   */
  cloud.stately.db.SegmentationParamsOrBuilder getSegmentationParamsOrBuilder();

  /**
   * <pre>
   * schema_version_id is the version of the store's schema to use to interpret
   * items. If there is no version with this ID, the operation will error with
   * SchemaVersionNotFound error. You should not have to set this manually as
   * your generated SDK should know its schema version and wire this in for you.
   * </pre>
   *
   * <code>uint32 schema_version_id = 5 [json_name = "schemaVersionId"];</code>
   * @return The schemaVersionId.
   */
  int getSchemaVersionId();

  /**
   * <pre>
   * schema_id refers to the schema to use for this operation.
   * If the store_id does not have a schema with this ID, the operation will
   * error with SchemaNotFound error. You should not have to set this manually
   * as your generated SDK should know its schema and wire this in for you.
   * </pre>
   *
   * <code>uint64 schema_id = 6 [json_name = "schemaId"];</code>
   * @return The schemaId.
   */
  long getSchemaId();
}
