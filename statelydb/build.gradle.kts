/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
    id("com.diffplug.spotless") version "7.2.1"
    id("checkstyle")
    id("org.jreleaser") version "1.20.0"
}

// Note: JavaPluginConvention deprecation warning is from JReleaser plugin v1.20.0
// This is a known issue tracked at https://github.com/jreleaser/jreleaser/issues/1673
// The warning will be fixed in a future JReleaser version for Gradle 9.0 compatibility

group = "cloud.stately"
version = "0.6.0" // x-release-please-version
description =
    "Client for StatelyDB, a document database built on top of DynamoDB with Elastic Schema that allows you to change your data model any time with automatic backwards compatibility."

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.13.4")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // grpc/proto deps
    runtimeOnly("io.grpc:grpc-netty-shaded:1.75.0")
    implementation("io.grpc:grpc-protobuf:1.75.0")

    implementation("javax.annotation:javax.annotation-api:1.3.2")

    // need to expose this because we encode/decode protos in generated code.
    api("com.google.protobuf:protobuf-java:4.32.0")
    // need to expose this because grpc status is part of our StatelyException API.
    api("io.grpc:grpc-stub:1.75.0")

    // Google Guava for ListenableFuture and utilities
    implementation("com.google.guava:guava:33.4.8-jre")
}

// Add proto directory as a source directory
sourceSets {
    main {
        java {
            // setSrcDirs replaces the default, srcDirs appends to the default
            setSrcDirs(listOf("src/main/java", "src/main/proto"))
        }
    }
    test {
        java {
            setSrcDirs(listOf("src/test/java"))
        }
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    testLogging {
        // Log events for passed, skipped, and failed tests
        events("passed", "skipped", "failed")

        // Show the full exception format
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

        // And most importantly, show standard streams
        showStandardStreams = true
    }
}

tasks.compileJava {
    // Ensure Java 11 compatibility
    options.release = 11
}

// Configure publishing artifacts
java {
    withJavadocJar()
    withSourcesJar()
}

// Configure javadoc to exclude generated proto files and fail on warnings
tasks.javadoc {
    exclude { it.file.path.contains("/proto/") }
    options {
        (this as StandardJavadocDocletOptions).addBooleanOption("Xwerror", true)
    }
}

spotless {
    // limit format enforcement to just the files changed by this feature branch
    ratchetFrom("origin/main")

    format("misc") {
        // define the files to apply `misc` to
        target("*.gradle", ".gitattributes", ".gitignore")

        // define the steps to apply to those files
        trimTrailingWhitespace()
        // leadingSpacesToTabs() // Uncomment if you want to use tabs instead of spaces
        endWithNewline()
    }
    kotlinGradle {
        target("*.gradle.kts", "**/*.gradle.kts")
        ktlint()
    }
    java {
        target("src/main/java/**/*.java", "src/test/java/**/*.java")

        // imports
        importOrder()
        removeUnusedImports()
        removeWildcardImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat() // has its own section below

        // apply a specific flavor of google-java-format
        googleJavaFormat() // You can pass a version string if needed, e.g. googleJavaFormat("1.8")

        formatAnnotations()
    }
}

checkstyle {
    toolVersion = "11.0.1"
    config = resources.text.fromFile("config/checkstyle/checkstyle.xml")
    maxWarnings = 0
}

// Publishing configuration
publishing {
    publications {
        create<MavenPublication>("maven") {
            from(components["java"])

            pom {
                name = "StatelyDB Java SDK"
                description = project.description
                url = "https://github.com/StatelyCloud/java-sdk"

                licenses {
                    license {
                        name = "Apache License 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                    }
                }

                developers {
                    developer {
                        id = "stately.cloud"
                        name = "Stately Cloud"
                        email = "support@stately.cloud"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/StatelyCloud/java-sdk.git"
                    developerConnection = "scm:git:ssh://github.com:StatelyCloud/java-sdk.git"
                    url = "https://github.com/StatelyCloud/java-sdk/tree/main"
                }
            }
        }
    }

    // jreleaser expects local deploy to be done as a prerequisite step
    // https://jreleaser.org/guide/latest/examples/maven/maven-central.html
    repositories {
        maven {
            name = "staging-deploy"
            url = uri(layout.buildDirectory.dir("staging-deploy"))
        }
    }
}

// JReleaser configuration
jreleaser {

    release {
        github {
            enabled.set(false)
        }
    }

    signing {
        active.set(org.jreleaser.model.Active.ALWAYS)
        armored.set(true)
    }

    deploy {
        maven {
            mavenCentral {
                create("sonatype") {
                    active.set(org.jreleaser.model.Active.ALWAYS)
                    url.set("https://central.sonatype.com/api/v1/publisher")
                    stagingRepository("build/staging-deploy")
                    maxRetries.set(10)
                }
            }
        }
    }
}
